var response=require("cfn-response"),aws=require("aws-sdk");aws.config.region=process.env.AWS_REGION;var ssm=new aws.SSM;function isObject(item){return item&&"object"==typeof item&&!Array.isArray(item)}function isShallow(item){return!Array.isArray(item)||!item.find(item=>"object"==typeof item)}function assign(target,...sources){if(!sources.length)return target;const source=sources.shift();if(isObject(target)&&isObject(source))for(const key in source)isObject(source[key])?(target[key]||Object.assign(target,{[key]:{}}),assign(target[key],source[key])):isShallow(source[key])?Object.assign(target,{[key]:source[key]}):(target[key]||Object.assign(target,{[key]:[]}),Object.assign(target,{[key]:source[key].map((item,index)=>assign(target[key][index]||{},item))}));return assign(target,...sources)}exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,"Delete"!==event.RequestType?ssm.getParameter({Name:params.name}).promise().then(function(result){return console.log(JSON.stringify(result,null,2)),value=JSON.parse(result.Parameter.Value),value=assign(value,JSON.parse(params.value)),ssm.putParameter({Name:params.name,Type:result.Parameter.Type,Value:JSON.stringify(value),Overwrite:!0}).promise()}).then(()=>response.send(event,context,response.SUCCESS)).catch(e=>{console.log(e),response.send(event,context,response.FAILED)}):response.send(event,context,response.SUCCESS,params)};